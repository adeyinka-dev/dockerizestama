from django.dispatch import receiver
from django.db.models.signals import post_save
from django.contrib.auth.models import AbstractUser
from django.db import models
from datetime import timedelta, date
import random, uuid, os

from django.forms import ValidationError


# Save with random name to avoid conflict
def unique_file_path(instance, filename):
    """Generates unique name for uploaded file."""
    base_filename, file_extension = os.path.splitext(filename)
    unique_name = f"{uuid.uuid4()}{file_extension}"
    return os.path.join("users/", unique_name)


# Validate Image size
def validate_file_size(value):
    filesize = value.size

    if filesize > 500 * 1024:
        raise ValidationError("The maximum file size that can be uploaded is 500KB")
    else:
        return value


# The user model with additional information
class Tenant(AbstractUser):
    username = models.CharField(max_length=150, unique=True, help_text="")
    first_name = models.CharField(max_length=30, blank=True, null=True)
    middle_initial = models.CharField(max_length=1, null=True, blank=True)
    last_name = models.CharField(max_length=30, blank=True, null=True)
    dob = models.DateField(null=True, blank=True)
    matric_num = models.CharField(max_length=20, unique=True, blank=True, null=True)
    sex = models.CharField(max_length=1, null=True, blank=True)
    faculty = models.CharField(max_length=50, null=True, blank=True)
    department = models.CharField(max_length=50, null=True, blank=True)
    level = models.SmallIntegerField(null=True, blank=True)
    phone_number = models.CharField(max_length=30, blank=True, null=True)
    # A STAMA id , unique ID generated by random assigned to each tenant.
    stama_id = models.CharField(max_length=10, unique=True, null=True, blank=True)
    user_image = models.ImageField(
        upload_to=unique_file_path,
        validators=[validate_file_size],
        null=True,
        blank=True,
    )
    rent_start_date = models.DateField(null=True, blank=True)
    # Next of kin model added to user part
    nok_name = models.CharField(max_length=30, null=True, blank=True)
    nok_phone = models.CharField(max_length=30, null=True, blank=True)
    nok_email = models.EmailField(max_length=30, null=True, blank=True)

    # rent vailidy
    def rent_validity(self):
        if self.rent_start_date:
            rent_due_date = self.rent_start_date + timedelta(days=365)
            return rent_due_date
        return None

    rent_validity.short_description = "Rent Due Date"

    # Function to return age after user enters there dob
    def age(self):
        today = date.today()
        if self.dob:
            if self.dob > today:
                return "Invalid, Time traveller from the future not allowed!"
            else:
                return (
                    today.year
                    - self.dob.year
                    - ((today.month, today.day) < (self.dob.month, self.dob.day))
                )
        else:
            return None

    @property
    def room_id(self):
        return self.room.room_id if self.room else "No room assigned"

    @property
    def room_number(self):
        return self.room.room_number if self.room else "No room assigned"

    @property
    def hostel(self):
        return self.room.hostel.name if self.room else "No hostel assigned"


# Function to generate a unique STAMA_ID , assigned to each user on registration. This is will serve as login later.
# The @receiver decorator inidctaes the function should run when a tenant instance is saved
@receiver(post_save, sender=Tenant)
def create_stama_id(sender, instance, created, **kwargs):
    # If a new Tenant instance has been created and the "stama_id" is empty
    if created and not instance.stama_id:
        # Random number between 1 and 9999
        # The resulting integer is formatted as a string, with leading zeros if necessary to ensure it's 5 digits long
        random_num = f"{random.randint(1, 99999):05}"
        instance.stama_id = "STAMA" + random_num
        instance.save()
